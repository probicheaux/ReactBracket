PROPERTIES OF A BRACKET

Making one from a list of entrants
A bracket of x^2 entrants has x matches in round 1 and that's it.
If there are not exactly x^2 entrants in the bracket, those initial matches are moved to round 2.
Then, for each player over the nearest x^2 value, one of those players within the first x^2 players in the list is moved to round 1.
Example: if there are 9 players in a bracket, there are four matches in round 2. Player 2 plays 7, 3 plays 6, and 4 plays 5.
Player 1 plays the winner of the round 1 match, between players 8 and 9. Add another player, and player 2 is now playing the winner of
7 and 10. If there are 13 players, one of the matches in round 2, which with 9 players consisted of players 4 and 5, now is played
by the winner of two round 1 matches, between players 4 and 13 and players 5 and 12. Finally at 15, only player 1 is in round 2, with
8v9, 4v13, 5v12, 2v15, 7v10, 3v14, and 6v11 all taking place in round 1. 16 is a power of 2, so we simply make 8 matches in round 1.

Sample build with 13
players = [1,2,3,4,5,6,7,8,9,10,11,12,13] (0-indexed because fuck you)
8 is the nearest power of 2, without going over.
13-8 = 5. round1 = players[8-5:], round2 = players[:8-5], where 8 is the power of 2 and 5 is the difference.
Making the round1 matches: round1 = [4,5,6,7,8,9,10,11,12,13]
len(round1) = 10
player1 = round1.pop(len(round1)//2 - 1)
round1 = [4,5,6,7,9,10,11,12,13], len(round1) = 9, len(round1)//2 = 4
player2 = round1.pop(len(round1)//2)
player1 = 8, player2 = 9
Push a match with player1 and player2 to the round one match list.
Repeat this process until there are no longer any players in round 1.
Round 2 is populated with as many empty matches as there are filled matches in round 1.
Player 1 is placed in player1 of the first match.
Player 2 is placed in player1 of the first match from the middle.
Player 3 is placed in player1 of the last match.
Player 4 is placed in player1 of the second match.
How do we determine where a player goes?

---

The number of matches in round 1 isn't really linked to the number of matches in round 2.
We need to know where these matches go.
We can determine this using the same method we determine where the round two players go, I think, because the first match generated
for round one will play player 1, and should therefore be opposite it.